{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DBMS Chapters Chapter 1: Introduction Chapter 2: Introduction to Relational Languages Chapter 3: Introduction to SQL Chapter 4: Intermediate SQL Chapter 5: Advanced SQL Sections 5.4 onwards may be omitted. Chapter 6: Entity-Relationship Model Chapter 7: Relational Database Design Chapter 8: Complex Data Types Chapter 9: Application Design Chapter 10: Big Data Chapter 11: Data Analytics Chapter 12: Physical Storage Systems Chapter 13: Storage and File Structure Chapter 14: Indexing Chapter 15: Query Processing Chapter 16: Query Optimization Chapter 17: Transactions Chapter 18: Concurrency Control Section 18.8 (Snapshot Isolation), Section 18.9 (Weak Levels of Consistency) may be omitted. Chapter 19: Recovery System Section 19.8 (ARIES) may be omitted. PostgreSQL Cheatsheet (Markdown) This cheatsheet summarizes some essential PostgreSQL commands for managing databases, users, tables, and data. Connection: psql -h <hostname> -p <port> -d <database> -U <username> : Connect to a PostgreSQL server (replace placeholders with actual values). Databases: CREATE DATABASE <database_name> : Create a new database. DROP DATABASE <database_name> : Delete an existing database (use with caution!). \\l : List all databases. \\connect <database_name> : Switch to a different database within the same session. Users and Roles: CREATE ROLE <username> [WITH PASSWORD '<password>'] : Create a new user. GRANT <privilege> ON <object> TO <username> : Grant specific privileges (e.g., SELECT, INSERT, UPDATE, DELETE) on a database object (table, schema) to a user. REVOKE <privilege> ON <object> FROM <username> : Revoke privileges from a user. \\du : List all roles (users). Tables: CREATE TABLE <table_name> ( <column_name> <data_type> [CONSTRAINT], ...); : Create a new table with columns and constraints. DESCRIBE <table_name> : Show the structure of a table. DROP TABLE <table_name> : Delete a table (use with caution!). \\dt : List all tables in the current schema. Data Manipulation: INSERT INTO <table_name> (<column1>, <column2>, ...) VALUES (<value1>, <value2>, ...); : Insert data into a table. SELECT * FROM <table_name> [WHERE <condition>]; : Retrieve data from a table (all columns by default, with optional filtering). UPDATE <table_name> SET <column_name> = <new_value> [WHERE <condition>]; : Update existing data in a table. DELETE FROM <table_name> [WHERE <condition>]; : Delete rows from a table. Other Useful Commands: \\q : Quit the psql client. \\h : Get help on a specific command (e.g., \\h CREATE TABLE ). \\conninfo : Display connection information. Additional Notes: Remember to replace placeholders like <database_name> , <username> , etc. with actual values. This is a basic cheatsheet. PostgreSQL offers many more commands and functionalities. Refer to the official documentation for in-depth details: https://www.postgresql.org/docs/","title":"Welcome to DBMS"},{"location":"#welcome-to-dbms","text":"","title":"Welcome to DBMS"},{"location":"#chapters","text":"Chapter 1: Introduction Chapter 2: Introduction to Relational Languages Chapter 3: Introduction to SQL Chapter 4: Intermediate SQL Chapter 5: Advanced SQL Sections 5.4 onwards may be omitted. Chapter 6: Entity-Relationship Model Chapter 7: Relational Database Design Chapter 8: Complex Data Types Chapter 9: Application Design Chapter 10: Big Data Chapter 11: Data Analytics Chapter 12: Physical Storage Systems Chapter 13: Storage and File Structure Chapter 14: Indexing Chapter 15: Query Processing Chapter 16: Query Optimization Chapter 17: Transactions Chapter 18: Concurrency Control Section 18.8 (Snapshot Isolation), Section 18.9 (Weak Levels of Consistency) may be omitted. Chapter 19: Recovery System Section 19.8 (ARIES) may be omitted.","title":"Chapters"},{"location":"#postgresql-cheatsheet-markdown","text":"This cheatsheet summarizes some essential PostgreSQL commands for managing databases, users, tables, and data. Connection: psql -h <hostname> -p <port> -d <database> -U <username> : Connect to a PostgreSQL server (replace placeholders with actual values). Databases: CREATE DATABASE <database_name> : Create a new database. DROP DATABASE <database_name> : Delete an existing database (use with caution!). \\l : List all databases. \\connect <database_name> : Switch to a different database within the same session. Users and Roles: CREATE ROLE <username> [WITH PASSWORD '<password>'] : Create a new user. GRANT <privilege> ON <object> TO <username> : Grant specific privileges (e.g., SELECT, INSERT, UPDATE, DELETE) on a database object (table, schema) to a user. REVOKE <privilege> ON <object> FROM <username> : Revoke privileges from a user. \\du : List all roles (users). Tables: CREATE TABLE <table_name> ( <column_name> <data_type> [CONSTRAINT], ...); : Create a new table with columns and constraints. DESCRIBE <table_name> : Show the structure of a table. DROP TABLE <table_name> : Delete a table (use with caution!). \\dt : List all tables in the current schema. Data Manipulation: INSERT INTO <table_name> (<column1>, <column2>, ...) VALUES (<value1>, <value2>, ...); : Insert data into a table. SELECT * FROM <table_name> [WHERE <condition>]; : Retrieve data from a table (all columns by default, with optional filtering). UPDATE <table_name> SET <column_name> = <new_value> [WHERE <condition>]; : Update existing data in a table. DELETE FROM <table_name> [WHERE <condition>]; : Delete rows from a table. Other Useful Commands: \\q : Quit the psql client. \\h : Get help on a specific command (e.g., \\h CREATE TABLE ). \\conninfo : Display connection information. Additional Notes: Remember to replace placeholders like <database_name> , <username> , etc. with actual values. This is a basic cheatsheet. PostgreSQL offers many more commands and functionalities. Refer to the official documentation for in-depth details: https://www.postgresql.org/docs/","title":"PostgreSQL Cheatsheet (Markdown)"},{"location":"cheatsheet/","text":"PSQL Magic words: psql -U postgres Some interesting flags (to see all, use -h or --help depending on your psql version): -E : will describe the underlaying queries of the \\ commands (cool for learning!) -l : psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS) Most \\d commands support additional param of __schema__.name__ and accept wildcards like *.* \\? : Show help (list of available commands with an explanation) \\q : Quit/Exit \\c __database__ : Connect to a database \\d __table__ : Show table definition (columns, etc.) including triggers \\d+ __table__ : More detailed table definition including description and physical disk size \\l : List databases \\dy : List events \\df : List functions \\di : List indexes \\dn : List schemas \\dt *.* : List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones) \\dT+ : List all data types \\dv : List views \\dx : List all extensions installed \\df+ __function__ : Show function SQL code. \\x : Pretty-format query results instead of the not-so-useful ASCII tables \\copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV : Export a table as CSV \\des+ : List all foreign servers \\dE[S+] : List all foreign tables \\! __bash_command__ : execute __bash_command__ (e.g. \\! ls ) User Related: \\du : List users \\du __username__ : List a username if present. create role __test1__ : Create a role with an existing username. create role __test2__ noinherit login password __passsword__; : Create a role with username and password. set role __test__; : Change role for current session to __test__ . grant __test2__ to __test1__; : Allow __test1__ to set its role as __test2__ . \\deu+ : List all user mapping on server Create command There are many CREATE choices, like CREATE DATABASE __database_name__ , CREATE TABLE __table_name__ ... Parameters differ but can be checked at the official documentation . Handy queries SELECT * FROM pg_proc WHERE proname='__procedurename__' : List procedure/function SELECT * FROM pg_views WHERE viewname='__viewname__'; : List view (including the definition) SELECT pg_size_pretty(pg_total_relation_size('__table_name__')); : Show DB table space in use SELECT pg_size_pretty(pg_database_size('__database_name__')); : Show DB space in use show statement_timeout; : Show current user's statement timeout SELECT * FROM pg_indexes WHERE tablename='__table_name__' AND schemaname='__schema_name__'; : Show table indexes Get all indexes from all tables of a schema: SELECT t . relname AS table_name , i . relname AS index_name , a . attname AS column_name FROM pg_class t , pg_class i , pg_index ix , pg_attribute a , pg_namespace n WHERE t . oid = ix . indrelid AND i . oid = ix . indexrelid AND a . attrelid = t . oid AND a . attnum = ANY ( ix . indkey ) AND t . relnamespace = n . oid AND n . nspname = 'kartones' ORDER BY t . relname , i . relname Execution data: Queries being executed at a certain DB: SELECT datname , application_name , pid , backend_start , query_start , state_change , state , query FROM pg_stat_activity WHERE datname = '__database_name__' ; Get all queries from all dbs waiting for data (might be hung): SELECT * FROM pg_stat_activity WHERE waiting = 't' Currently running queries with process pid: SELECT pg_stat_get_backend_pid ( s . backendid ) AS procpid , pg_stat_get_backend_activity ( s . backendid ) AS current_query FROM ( SELECT pg_stat_get_backend_idset () AS backendid ) AS s ; Get Connections by Database: SELECT datname, numbackends FROM pg_stat_database; Casting: CAST (column AS type) or column::type '__table_name__'::regclass::oid : Get oid having a table name Query analysis: EXPLAIN __query__ : see the query plan for the given query EXPLAIN ANALYZE __query__ : see and execute the query plan for the given query ANALYZE [__table__] : collect statistics Generating random data ( source ): INSERT INTO some_table (a_float_value) SELECT random() * 100000 FROM generate_series(1, 1000000) i; Get sizes of tables, indexes and full DBs: select current_database () as database , pg_size_pretty ( total_database_size ) as total_database_size , schema_name , table_name , pg_size_pretty ( total_table_size ) as total_table_size , pg_size_pretty ( table_size ) as table_size , pg_size_pretty ( index_size ) as index_size from ( select table_name , table_schema as schema_name , pg_database_size ( current_database ()) as total_database_size , pg_total_relation_size ( table_name ) as total_table_size , pg_relation_size ( table_name ) as table_size , pg_indexes_size ( table_name ) as index_size from information_schema . tables where table_schema = current_schema () and table_name like 'table_%' order by total_table_size ) as sizes ; COPY command : Import/export from CSV to tables: COPY table_name [ ( column_name [, ...] ) ] FROM { 'filename' | STDIN } [ [ WITH ] ( option [, ...] ) ] COPY { table_name [ ( column_name [, ...] ) ] | ( query ) } TO { 'filename' | STDOUT } [ [ WITH ] ( option [, ...] ) ] List all grants for a specific user SELECT table_catalog , table_schema , table_name , privilege_type FROM information_schema . table_privileges WHERE grantee = 'user_to_check' ORDER BY table_name ; List all assigned user roles SELECT r . rolname , r . rolsuper , r . rolinherit , r . rolcreaterole , r . rolcreatedb , r . rolcanlogin , r . rolconnlimit , r . rolvaliduntil , ARRAY ( SELECT b . rolname FROM pg_catalog . pg_auth_members m JOIN pg_catalog . pg_roles b ON ( m . roleid = b . oid ) WHERE m . member = r . oid ) as memberof , r . rolreplication FROM pg_catalog . pg_roles r ORDER BY 1 ; Check permissions in a table: SELECT grantee , privilege_type FROM information_schema . role_table_grants WHERE table_name = 'name-of-the-table' ; Kill all Connections: SELECT pg_terminate_backend ( pg_stat_activity . pid ) FROM pg_stat_activity WHERE datname = current_database () AND pid <> pg_backend_pid (); Keyboard shortcuts CTRL + R : reverse-i-search Tools ptop and pg_top : top for PG. Available on the APT repository from apt.postgresql.org . pg_activity : Command line tool for PostgreSQL server activity monitoring. Unix-like reverse search in psql : $ echo \"bind \" ^R \" em-inc-search-prev\" > $HOME /.editrc $ source $HOME /.editrc Show IP of the DB Instance: SELECT inet_server_addr(); File to save PostgreSQL credentials and permissions (format: hostname:port:database:username:password ): chmod 600 ~/.pgpass Collect statistics of a database (useful to improve speed after a Database Upgrade as previous query plans are deleted): ANALYZE VERBOSE; To obtain the CREATE TABLE query of a table, any visual GUI like pgAdmin allows to easily, but else you can use pg_dump , e.g.: pg_dump -t '<schema>.<table>' --schema-only <database> ( source ) Resources & Documentation Operations Cheat Sheet : Official PG wiki cheat sheet with an amazing amount of explanations of many topics, features, and many many internal implementation details Postgres Weekly newsletter: The best way IMHO to keep up to date with PG news 100 psql Tips : Name says all, lots of useful tips! PostgreSQL Exercises : An awesome resource to learn to learn SQL, teaching you with simple examples in a great visual way. Highly recommended . A Performance Cheat Sheet for PostgreSQL : Great explanations of EXPLAIN , EXPLAIN ANALYZE , VACUUM , configuration parameters and more. Quite interesting if you need to tune-up a postgres setup. annotated.conf : Annotations of all 269 postgresql.conf settings for PostgreSQL 10. psql -c \"\\l+\" -H -q postgres > out.html : Generate a html report of your databases (source: Daniel Westermann ) </pre>","title":"Cheatsheet"},{"location":"cheatsheet/#psql","text":"Magic words: psql -U postgres Some interesting flags (to see all, use -h or --help depending on your psql version): -E : will describe the underlaying queries of the \\ commands (cool for learning!) -l : psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS) Most \\d commands support additional param of __schema__.name__ and accept wildcards like *.* \\? : Show help (list of available commands with an explanation) \\q : Quit/Exit \\c __database__ : Connect to a database \\d __table__ : Show table definition (columns, etc.) including triggers \\d+ __table__ : More detailed table definition including description and physical disk size \\l : List databases \\dy : List events \\df : List functions \\di : List indexes \\dn : List schemas \\dt *.* : List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones) \\dT+ : List all data types \\dv : List views \\dx : List all extensions installed \\df+ __function__ : Show function SQL code. \\x : Pretty-format query results instead of the not-so-useful ASCII tables \\copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV : Export a table as CSV \\des+ : List all foreign servers \\dE[S+] : List all foreign tables \\! __bash_command__ : execute __bash_command__ (e.g. \\! ls ) User Related: \\du : List users \\du __username__ : List a username if present. create role __test1__ : Create a role with an existing username. create role __test2__ noinherit login password __passsword__; : Create a role with username and password. set role __test__; : Change role for current session to __test__ . grant __test2__ to __test1__; : Allow __test1__ to set its role as __test2__ . \\deu+ : List all user mapping on server","title":"PSQL"},{"location":"cheatsheet/#create-command","text":"There are many CREATE choices, like CREATE DATABASE __database_name__ , CREATE TABLE __table_name__ ... Parameters differ but can be checked at the official documentation .","title":"Create command"},{"location":"cheatsheet/#handy-queries","text":"SELECT * FROM pg_proc WHERE proname='__procedurename__' : List procedure/function SELECT * FROM pg_views WHERE viewname='__viewname__'; : List view (including the definition) SELECT pg_size_pretty(pg_total_relation_size('__table_name__')); : Show DB table space in use SELECT pg_size_pretty(pg_database_size('__database_name__')); : Show DB space in use show statement_timeout; : Show current user's statement timeout SELECT * FROM pg_indexes WHERE tablename='__table_name__' AND schemaname='__schema_name__'; : Show table indexes Get all indexes from all tables of a schema: SELECT t . relname AS table_name , i . relname AS index_name , a . attname AS column_name FROM pg_class t , pg_class i , pg_index ix , pg_attribute a , pg_namespace n WHERE t . oid = ix . indrelid AND i . oid = ix . indexrelid AND a . attrelid = t . oid AND a . attnum = ANY ( ix . indkey ) AND t . relnamespace = n . oid AND n . nspname = 'kartones' ORDER BY t . relname , i . relname Execution data: Queries being executed at a certain DB: SELECT datname , application_name , pid , backend_start , query_start , state_change , state , query FROM pg_stat_activity WHERE datname = '__database_name__' ; Get all queries from all dbs waiting for data (might be hung): SELECT * FROM pg_stat_activity WHERE waiting = 't' Currently running queries with process pid: SELECT pg_stat_get_backend_pid ( s . backendid ) AS procpid , pg_stat_get_backend_activity ( s . backendid ) AS current_query FROM ( SELECT pg_stat_get_backend_idset () AS backendid ) AS s ; Get Connections by Database: SELECT datname, numbackends FROM pg_stat_database; Casting: CAST (column AS type) or column::type '__table_name__'::regclass::oid : Get oid having a table name Query analysis: EXPLAIN __query__ : see the query plan for the given query EXPLAIN ANALYZE __query__ : see and execute the query plan for the given query ANALYZE [__table__] : collect statistics Generating random data ( source ): INSERT INTO some_table (a_float_value) SELECT random() * 100000 FROM generate_series(1, 1000000) i; Get sizes of tables, indexes and full DBs: select current_database () as database , pg_size_pretty ( total_database_size ) as total_database_size , schema_name , table_name , pg_size_pretty ( total_table_size ) as total_table_size , pg_size_pretty ( table_size ) as table_size , pg_size_pretty ( index_size ) as index_size from ( select table_name , table_schema as schema_name , pg_database_size ( current_database ()) as total_database_size , pg_total_relation_size ( table_name ) as total_table_size , pg_relation_size ( table_name ) as table_size , pg_indexes_size ( table_name ) as index_size from information_schema . tables where table_schema = current_schema () and table_name like 'table_%' order by total_table_size ) as sizes ; COPY command : Import/export from CSV to tables: COPY table_name [ ( column_name [, ...] ) ] FROM { 'filename' | STDIN } [ [ WITH ] ( option [, ...] ) ] COPY { table_name [ ( column_name [, ...] ) ] | ( query ) } TO { 'filename' | STDOUT } [ [ WITH ] ( option [, ...] ) ] List all grants for a specific user SELECT table_catalog , table_schema , table_name , privilege_type FROM information_schema . table_privileges WHERE grantee = 'user_to_check' ORDER BY table_name ; List all assigned user roles SELECT r . rolname , r . rolsuper , r . rolinherit , r . rolcreaterole , r . rolcreatedb , r . rolcanlogin , r . rolconnlimit , r . rolvaliduntil , ARRAY ( SELECT b . rolname FROM pg_catalog . pg_auth_members m JOIN pg_catalog . pg_roles b ON ( m . roleid = b . oid ) WHERE m . member = r . oid ) as memberof , r . rolreplication FROM pg_catalog . pg_roles r ORDER BY 1 ; Check permissions in a table: SELECT grantee , privilege_type FROM information_schema . role_table_grants WHERE table_name = 'name-of-the-table' ; Kill all Connections: SELECT pg_terminate_backend ( pg_stat_activity . pid ) FROM pg_stat_activity WHERE datname = current_database () AND pid <> pg_backend_pid ();","title":"Handy queries"},{"location":"cheatsheet/#keyboard-shortcuts","text":"CTRL + R : reverse-i-search","title":"Keyboard shortcuts"},{"location":"cheatsheet/#tools","text":"ptop and pg_top : top for PG. Available on the APT repository from apt.postgresql.org . pg_activity : Command line tool for PostgreSQL server activity monitoring. Unix-like reverse search in psql : $ echo \"bind \" ^R \" em-inc-search-prev\" > $HOME /.editrc $ source $HOME /.editrc Show IP of the DB Instance: SELECT inet_server_addr(); File to save PostgreSQL credentials and permissions (format: hostname:port:database:username:password ): chmod 600 ~/.pgpass Collect statistics of a database (useful to improve speed after a Database Upgrade as previous query plans are deleted): ANALYZE VERBOSE; To obtain the CREATE TABLE query of a table, any visual GUI like pgAdmin allows to easily, but else you can use pg_dump , e.g.: pg_dump -t '<schema>.<table>' --schema-only <database> ( source )","title":"Tools"},{"location":"cheatsheet/#resources-documentation","text":"Operations Cheat Sheet : Official PG wiki cheat sheet with an amazing amount of explanations of many topics, features, and many many internal implementation details Postgres Weekly newsletter: The best way IMHO to keep up to date with PG news 100 psql Tips : Name says all, lots of useful tips! PostgreSQL Exercises : An awesome resource to learn to learn SQL, teaching you with simple examples in a great visual way. Highly recommended . A Performance Cheat Sheet for PostgreSQL : Great explanations of EXPLAIN , EXPLAIN ANALYZE , VACUUM , configuration parameters and more. Quite interesting if you need to tune-up a postgres setup. annotated.conf : Annotations of all 269 postgresql.conf settings for PostgreSQL 10. psql -c \"\\l+\" -H -q postgres > out.html : Generate a html report of your databases (source: Daniel Westermann ) </pre>","title":"Resources &amp; Documentation"},{"location":"week1/check_list/","text":"[X] Text Book [X] slides [ ] weekly assigment [X] lecture [ ] live session [ ] text book activity","title":"Check list"},{"location":"week1/summary/","text":"Summary The query processor subsystem compiles and executes DDL and DML state- ments. Transaction management ensures that the database remains in a consistent (cor- rect) state despite system failures. The transaction manager ensures that concur- rent transaction executions proceed without con\ufb02icts. The architecture of a database system is greatly in\ufb02uenced by the underlying com- puter system on which the database system runs. Database systems can be central- ized, or parallel, involving multiple machines. Distributed databases span multiple geographically separated machines. Database applications are typically broken up into a front-end part that runs at client machines and a part that runs at the backend. In two-tier architectures, the front end directly communicates with a database running at the back end. In three- tier architectures, the back end part is itself broken up into an application server and a database server. There are four di\ufb00erent types of database-system users, di\ufb00erentiated by the way they expect to interact with the system. Di\ufb00erent types of user interfaces have been designed for the di\ufb00erent types of users. Data-analysis techniques attempt to automatically discover rules and patterns from data. The \ufb01eld of data mining combines knowledge-discovery techniques invented by arti\ufb01cial intelligence researchers and statistical analysts with e\ufb03cient imple- mentation techniques that enable them to be used on extremely large databases. Database-management system (DBMS) Database-system applications Online transaction processing Data analytics File-processing systems Data inconsistency Consistency constraints Data abstraction Physical level Logical level View level Instance Schema Physical schema Logical schema Subschema Physical data independence Data models Entity-relationship model Relational data model Semi-structured data model Object-based data model Database languages Data-de\ufb01nition language Data-manipulation language Procedural DML Declarative DML nonprocedural DML Query language Data-de\ufb01nition language Domain Constraints Referential Integrity Authorization Read authorization Insert authorization Update authorization Delete authorization Metadata Application program Database design Conceptual design Normalization Speci\ufb01cation of functional re- quirements Physical-design phase Database Engine Storage manager Authorization and integrity manager Transaction manager File manager Bu\ufb00er manager Data \ufb01les Data dictionary Indices Query processor DDL interpreter DML compiler Query optimization Query evaluation engine Transaction Atomicity Consistency Durability Recovery manager Failure recovery Concurrency-control manager Database Architecture Centralized Parallel Distributed Database Application Architecture Two-tier Three-tier Application server Database administrator (DBA) 1 This chapter has described several major advantages of a database system. What are two disadvantages? 2List \ufb01ve ways in which the type declaration system of a language such as Java or C++ di\ufb00ers from the data de\ufb01nition language used in a database. 3 List six major steps that you would take in setting up a database for a particular enterprise. 4Suppose you want to build a video site similar to YouTube. Consider each of the points listed in Section - 2 as disadvantages of keeping data in a \ufb01le-processing system. Discuss the relevance of each of these points to the storage of actual video data, and to metadata about the video, such as title, the user who uploaded it, tags, and which users viewed it. 5Keyword queries used in web search are quite di\ufb00erent from database queries. List key di\ufb00erences between the two, in terms of the way the queries are speci\ufb01ed and in terms of what is the result of a query. List four applications you have used that most likely employed a database system to store persistent data. 7List four signi\ufb01cant di\ufb00erences between a \ufb01le-processing system and a DBMS. 8Explain the concept of physical data independence and its importance in database systems. 9List \ufb01ve responsibilities of a database-management system. For each responsi- bility, explain the problems that would arise if the responsibility were not dis- charged. 10List at least two reasons why database systems support data manipulation using a declarative query language such as SQL, instead of just providing a library of C or C++ functions to carry out data manipulation. 11Assume that two students are trying to register for a course in which there is only one open seat. What component of a database system prevents both students from being given that last seat? 12Explain the di\ufb00erence between two-tier and three-tier application architectures. Which is better suited for web applications? Why? 13List two features developed in the 2000s and that help database systems handle data-analytics workloads. 14Explain why NoSQL systems emerged in the 2000s, and brie\ufb02y contrast their features with traditional database systems. 15Describe at least three tables that might be used to store information in a social- networking system such as Facebook.","title":"Summary"},{"location":"week1/textbook/","text":"","title":"Textbook"},{"location":"week2/Lecture%202.1%20-%20Introduction%20to%20Relational%20Model1_annotated/","text":"Lecture 2.1 - Introduction to Relational Model1_annotated.pdf (PDF file)","title":"Lecture 2.1 - Introduction to Relational Model1_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.1%20-%20Introduction%20to%20Relational%20Model1_annotated/#lecture-21-introduction-to-relational-model1_annotatedpdf-pdf-file","text":"","title":"Lecture 2.1 - Introduction to Relational Model1_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.2%20-%20Introduction%20to%20Relational%20Model2_annotated/","text":"Lecture 2.2 - Introduction to Relational Model2_annotated.pdf (PDF file)","title":"Lecture 2.2 - Introduction to Relational Model2_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.2%20-%20Introduction%20to%20Relational%20Model2_annotated/#lecture-22-introduction-to-relational-model2_annotatedpdf-pdf-file","text":"","title":"Lecture 2.2 - Introduction to Relational Model2_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.3%20-%20Introduction%20to%20SQL1_annotated/","text":"Lecture 2.3 - Introduction to SQL1_annotated.pdf (PDF file)","title":"Lecture 2.3 - Introduction to SQL1_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.3%20-%20Introduction%20to%20SQL1_annotated/#lecture-23-introduction-to-sql1_annotatedpdf-pdf-file","text":"","title":"Lecture 2.3 - Introduction to SQL1_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.4%20-%20Introduction%20to%20SQL2_annotated/","text":"Lecture 2.4 - Introduction to SQL2_annotated.pdf (PDF file)","title":"Lecture 2.4 - Introduction to SQL2_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.4%20-%20Introduction%20to%20SQL2_annotated/#lecture-24-introduction-to-sql2_annotatedpdf-pdf-file","text":"","title":"Lecture 2.4 - Introduction to SQL2_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.5%20-%20Introduction%20to%20SQL3_annotated/","text":"Lecture 2.5 - Introduction to SQL3_annotated.pdf (PDF file)","title":"Lecture 2.5 - Introduction to SQL3_annotated.pdf (PDF file)"},{"location":"week2/Lecture%202.5%20-%20Introduction%20to%20SQL3_annotated/#lecture-25-introduction-to-sql3_annotatedpdf-pdf-file","text":"","title":"Lecture 2.5 - Introduction to SQL3_annotated.pdf (PDF file)"},{"location":"week2/check_list/","text":"[ ] Text Book [ ] slides [ ] weekly assigment [ ] lecture [ ] live session [ ] text book activity","title":"Check list"},{"location":"week2/tutorial_2.1/","text":"","title":"Tutorial 2.1"},{"location":"week3/Lecture%203.1%20-%20SQL%20Examples_annotated/","text":"This document provides examples of SQL queries, including: - Select statements - Cartesian products and the AS operator - WHERE clauses with AND and OR operators - String matching - ORDER BY clauses - IN clauses - Set operations (UNION, INTERSECT, EXCEPT) - Aggregate functions (AVG, MIN, MAX, COUNT, SUM)# Lecture 3.1 - SQL Examples_annotated.pdf (PDF file)","title":"Lecture 3.1   SQL Examples annotated"},{"location":"week3/Lecture%203.2%20-%20Intermediate%20SQL1_annotated/","text":"This module focuses on nested subqueries in SQL and data modification. Nested subqueries are select-from-where expressions embedded within other queries. They can be used for set membership, set comparisons, and set cardinality tests. Data modification involves deleting, inserting, and updating tuples in database tables. Deletion can be done using the DELETE statement, insertion using the INSERT statement, and updates using the UPDATE statement. The CASE statement can be used for conditional updates. Scalar subqueries can be used to update column values based on computations involving other tables.# Lecture 3.2 - Intermediate SQL1_annotated.pdf (PDF file)","title":"Lecture 3.2   Intermediate SQL1 annotated"},{"location":"week3/Lecture%203.3%20-%20Intermediate%20SQL2_annotated/","text":"","title":"Lecture 3.3   Intermediate SQL2 annotated"},{"location":"week3/Lecture%203.4%20-%20Intermediate%20SQL3_annotated/","text":"","title":"Lecture 3.4   Intermediate SQL3 annotated"},{"location":"week3/Lecture%203.5%20-%20Advanced%20SQL_annotated/","text":"","title":"Lecture 3.5   Advanced SQL annotated"},{"location":"week3/tutorial_3_5/","text":"","title":"Tutorial 3 5"}]}